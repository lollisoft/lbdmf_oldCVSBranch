/** \file
 *  This C header file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : /Users/lothar/develop/Projects/CPP/Plugins/DomainLanguages/lbUILanguage/ui.g
 *     -                            On : 2015-04-12 15:14:44
 *     -                 for the lexer : uiLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
uiLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef puiLexer, which is returned from a call to uiLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in puiLexer are  as follows:
 *
 *  - 
 void
      puiLexer->UI(puiLexer)
 *  - 
 void
      puiLexer->END(puiLexer)
 *  - 
 void
      puiLexer->FORMS(puiLexer)
 *  - 
 void
      puiLexer->FORM(puiLexer)
 *  - 
 void
      puiLexer->DECLARE(puiLexer)
 *  - 
 void
      puiLexer->FIELD(puiLexer)
 *  - 
 void
      puiLexer->DEFAULT(puiLexer)
 *  - 
 void
      puiLexer->FIELDTYPE(puiLexer)
 *  - 
 void
      puiLexer->SHOWS(puiLexer)
 *  - 
 void
      puiLexer->REFERS(puiLexer)
 *  - 
 void
      puiLexer->AS(puiLexer)
 *  - 
 void
      puiLexer->USING(puiLexer)
 *  - 
 void
      puiLexer->USE(puiLexer)
 *  - 
 void
      puiLexer->OVER(puiLexer)
 *  - 
 void
      puiLexer->DATA(puiLexer)
 *  - 
 void
      puiLexer->INFER(puiLexer)
 *  - 
 void
      puiLexer->YES(puiLexer)
 *  - 
 void
      puiLexer->TODO(puiLexer)
 *  - 
 void
      puiLexer->DOT(puiLexer)
 *  - 
 void
      puiLexer->WHITESPACE(puiLexer)
 *  - 
 void
      puiLexer->ESC(puiLexer)
 *  - 
 void
      puiLexer->STRING(puiLexer)
 *  - 
 void
      puiLexer->NUMBER(puiLexer)
 *  - 
 void
      puiLexer->ALPHA(puiLexer)
 *  - 
 void
      puiLexer->DIGITS(puiLexer)
 *  - 
 void
      puiLexer->Tokens(puiLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_uiLexer_H
#define _uiLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct uiLexer_Ctx_struct uiLexer, * puiLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
uiLexer

 */
struct uiLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mUI)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mEND)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mFORMS)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mFORM)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mDECLARE)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mFIELD)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mDEFAULT)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mFIELDTYPE)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mSHOWS)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mREFERS)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mAS)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mUSING)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mUSE)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mOVER)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mDATA)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mINFER)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mYES)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mTODO)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mESC)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mNUMBER)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mALPHA)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mDIGITS)	(struct uiLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct uiLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct uiLexer_Ctx_struct * ctx);
    void	    (*free)   (struct uiLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API puiLexer uiLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API puiLexer uiLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALPHA      4
#define AS      5
#define DATA      6
#define DECLARE      7
#define DEFAULT      8
#define DIGITS      9
#define DOT      10
#define END      11
#define ESC      12
#define FIELD      13
#define FIELDTYPE      14
#define FORM      15
#define FORMS      16
#define INFER      17
#define NUMBER      18
#define OVER      19
#define REFERS      20
#define SHOWS      21
#define STRING      22
#define TODO      23
#define UI      24
#define USE      25
#define USING      26
#define WHITESPACE      27
#define YES      28
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for uiLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
